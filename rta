#!/usr/bin/env python3
import numpy as np
import soundfile as sf
import argparse
from AudioSource import  RealTimeAudioSource, FileAudioSource
import AudioSource
from AudioProcessing import AudioProcessor
import cProfile
import pstats

# setup argparse before opening pygame
argparse = argparse.ArgumentParser(description='Audio Visualizer')
argparse.add_argument('--mode', choices=['spl', 'acf'], default="", help='Mode to run the visualizer in')
argparse.add_argument('--source', type=str, help='Use test data instead of real-time audio')
argparse.add_argument('--windowsize', type=int, default=65536, help='Window size for FFT')
argparse.add_argument('--rotate', choices=['true','false','True','False'], default=None)

args = argparse.parse_args()
if args.rotate:
    args.rotate = args.rotate.lower()

windowsize = int(args.windowsize)
if args.source == 'testdata':
    audio_source = FileAudioSource('testdata')
elif args.source == "-l":
    AudioSource.list_audio_devices()
    exit()
else:
    audio_source = RealTimeAudioSource(source=args.source)
next(audio_source) # read a chunk and discard - this is necessary to initialize samplerate

import time
def main():
    ap = AudioProcessor(window_size = args.windowsize, samplerate = AudioSource.samplerate, plot_duration = 30.0)
    data = np.random.randn(65536)  # Example data
    t0 = time.time()
    count = 100
    for _ in range(100):
        ap.process_data(data)
    t1 = time.time()
    print(f'{count/(t1-t0)} FPS')

if __name__ == "__main__":
    profiler = cProfile.Profile()
    profiler.enable()
    main()
    profiler.disable()
    with open('profile_output.txt', 'w') as f:
        ps = pstats.Stats(profiler, stream=f)
        ps.strip_dirs().sort_stats('cumulative').print_stats(20)
    print("Profiling data saved to 'profile_output.txt'")