#!/usr/bin/env python3
import numpy as np
import soundfile as sf
import os
from scipy.signal import resample
import argparse
from AudioSource import  RealTimeAudioSource, FileAudioSource
from AppMode import *

# setup argparse before opening pygame
argparse = argparse.ArgumentParser(description='Audio Visualizer')
argparse.add_argument('--mode', choices=['SPL', 'RTA','Autocorr'], default="SPL", help='Mode to run the visualizer in')
argparse.add_argument('--source', type=str, default=None, help='Use test data instead of real-time audio')
argparse.add_argument('--windowsize', type=int, default=16384, help='Window size for FFT')
args = argparse.parse_args()

# Update the dimensions of the fft_data and vol_data arrays
vol_data = np.zeros(screen_width)
fft_data = np.zeros((screen_width // 2 + 1, screen_height))
acf_data = np.zeros((screen_width // 2 + 1, screen_height))

def compute_volume(signal):
    global vol_data
    # Compute RMS (root mean square) volume of the signal
    rms = np.sqrt(np.mean(signal ** 2))
    spl = round(20 * np.log10(np.where(rms < 1.584e-5, 1.584e-5, rms)),1)  # Convert to dB
    vol_data = np.roll(vol_data, -1)
    vol_data[-1] = spl

def compute_smoothed_fft(signal, samplerate, previous_fft=None, alpha=0.2):
    pass

class AudioVisualizer:
    def __init__(self):
        global vol_data
        self.spl_mode = SPLMode(vol_data)
        self.rta_mode = None
        self.acf_mode = None
        self.current_mode = self.spl_mode # initial mode
        self.current_mode.setup_plot(vol_data)

    def switch_mode(self, mode_name):
        global vol_data
        if mode_name == 'RTA':
            pass #self.current_mode = self.rta_mode
        elif mode_name == 'SPL':
            self.current_mode = self.spl_mode
            self.current_mode.setup_plot(vol_data)
        elif mode_name == 'Autocorr':
            pass# self.current_mode = self.acf_mode
        else:
            raise ValueError(f"Invalid mode: {mode_name}")
        self.redraw()

    def redraw(self):
        self.current_mode.setup_plot()

    def process_audio_chunk(self, audio_chunk, samplerate):
        global vol_data
        compute_volume(audio_chunk)
        compute_smoothed_fft(audio_chunk, samplerate)
        if self.current_mode == self.spl_mode:
            self.current_mode.update_plot(vol_data)

def scan_buttons():
    # Simulate scanning for button presses
    return None

if __name__ == '__main__':
    windowsize = int(args.windowsize)
    if args.source == 'testdata':
        audio_source = FileAudioSource('testdata', chunksize=windowsize)
        samplerate = 48000
    else:
        samplerate = 44100 # for now - need to get this from the audio source
        audio_source = RealTimeAudioSource(source=args.source, chunksize=windowsize)

    visualizer = AudioVisualizer()

    try:
        while True:
            button_press = scan_buttons()
            if button_press:
                pass
                #visualizer.switch_mode(button_press)
            chunk = next(audio_source)
            visualizer.process_audio_chunk(chunk, samplerate)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise KeyboardInterrupt
    except KeyboardInterrupt:
        print('Goodbye')
    finally:
        pygame.quit()
