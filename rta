#!/usr/bin/env python3
import numpy as np
import soundfile as sf
import os
from scipy.signal import resample
import argparse
from AudioSource import  RealTimeAudioSource, FileAudioSource
from AppMode import SPLMode, ACFMode
import pygame

# setup argparse before opening pygame
argparse = argparse.ArgumentParser(description='Audio Visualizer')
argparse.add_argument('--mode', choices=['spl', 'acf'], default="", help='Mode to run the visualizer in')
argparse.add_argument('--source', type=str, help='Use test data instead of real-time audio')
argparse.add_argument('--windowsize', type=int, default=16384, help='Window size for FFT')
args = argparse.parse_args()

class AudioVisualizer:
    def __init__(self):
        self.spl_mode = SPLMode()
        self.acf_mode = ACFMode(windowsize, samplerate)
        self.current_mode = None
        self.switch_mode(args.mode)

    def switch_mode(self, mode_name):
        if mode_name == 'acf':
            self.current_mode = self.acf_mode
            self.current_mode.setup_plot()
        elif mode_name == 'spl':
            self.current_mode = self.spl_mode
            self.current_mode.setup_plot()
        else:
            raise ValueError(f"Invalid mode: {mode_name}")
        self.redraw()

    def redraw(self):
        self.current_mode.setup_plot()

    def process_audio_chunk(self, audio_chunk):
        self.spl_mode.process_data(audio_chunk)
        self.acf_mode.process_data(audio_chunk)
        if self.current_mode == self.spl_mode:
            self.current_mode.update_plot()

def scan_buttons():
    # Simulate scanning for button presses
    return None

if __name__ == '__main__':
    windowsize = int(args.windowsize)
    if args.source == 'testdata':
        audio_source = FileAudioSource('testdata', chunksize=windowsize)
        samplerate = 48000
    else:
        samplerate = 44100 # for now - need to get this from the audio source
        audio_source = RealTimeAudioSource(source=args.source, chunksize=windowsize)

    visualizer = AudioVisualizer()

    try:
        while True:
            button_press = scan_buttons()
            if button_press:
                pass
                #visualizer.switch_mode(button_press)
            chunk = next(audio_source)
            visualizer.process_audio_chunk(chunk)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise KeyboardInterrupt
    except KeyboardInterrupt:
        print('Goodbye')
    finally:
        pygame.quit()
