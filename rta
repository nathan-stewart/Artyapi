#!/usr/bin/env python3
import numpy as np
import soundfile as sf
import argparse
from AudioSource import  RealTimeAudioSource, FileAudioSource
import AudioSource
import AudioProcessing

# setup argparse before opening pygame
argparse = argparse.ArgumentParser(description='Audio Visualizer')
argparse.add_argument('--mode', choices=['spl', 'acf'], default="", help='Mode to run the visualizer in')
argparse.add_argument('--source', type=str, help='Use test data instead of real-time audio')
argparse.add_argument('--windowsize', type=int, default=4096, help='Window size for FFT')
argparse.add_argument('--rotate', choices=['true','false','True','False'], default=None)

args = argparse.parse_args()
if args.rotate:
    args.rotate = args.rotate.lower()
    if args.rotate == 'true':
        AppMode.rotate = True
    elif args.rotate == 'false':
        AppMode.rotate = False

windowsize = int(args.windowsize)
if args.source == 'testdata':
    audio_source = FileAudioSource('testdata')
elif args.source == "-l":
    AudioSource.list_audio_devices()
    exit()
else:
    audio_source = RealTimeAudioSource(source=args.source)
next(audio_source) # read a chunk and discard - this is necessary to initialize samplerate

class AudioVisualizer:
    def __init__(self):
        if AudioSource.samplerate is None:
            raise RuntimeError("Samplerate not set")
        self.processor = AudioProcessing(window_size = args.windowsize, samplerate = AudioSource.samplerate, plot_duration = 30.0)

def scan_buttons():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            raise KeyboardInterrupt
        elif event.type == pygame.KEYDOWN:
            return event.key
    return False

if __name__ == '__main__':
    visualizer = AudioVisualizer()
    try:
        while True:
            button_press = scan_buttons()
            if button_press:
                print('got keypress')
                visualizer.switch_mode(button_press)
            chunk = next(audio_source)
            visualizer.process_audio_chunk(chunk)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise KeyboardInterrupt
            pygame.display.flip()
            pygame.time.wait(10)
    except KeyboardInterrupt:
        print('Goodbye')
    finally:
        pygame.quit()
